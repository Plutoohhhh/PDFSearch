import sys

import pandas as pd
from PySide6.QtCore import QStandardPaths
from PySide6.QtWidgets import QWidget, QApplication, QFileDialog, QComboBox, QHBoxLayout, QLabel
from openpyxl import load_workbook

from model.ExcelModel import ExcelModel
from ui.TagsWidgetUI import Ui_TagsWidget


class TagsWidget(QWidget, Ui_TagsWidget):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.resetUi()
        self.bind()
        # ÂàùÂßãÂåñÊ®°Âûã
        self.model = ExcelModel([])

    def bind(self):
        self.btn_selectExcel.clicked.connect(self.on_btn_selectExcel)
        # ÂàùÂßãÂåñÈÄâ‰∏≠
        self.category_combo.currentIndexChanged.connect(self.update_model_apn)

    def resetUi(self):
        self.category_combo = QComboBox()
        self.model_combo = QComboBox()
        self.apn_combo = QComboBox()
        # Ê∑ªÂä†ÊØè‰∏ÄË°å
        self.add_filter_row("Material Category", self.category_combo)
        self.add_filter_row("Material Model", self.model_combo)
        self.add_filter_row("APN", self.apn_combo)
        self.label_status.hide()

    def add_filter_row(self, label_text, combo_box, items=None):
        items = items or []
        combo_box.addItems(items)
        row_layout = QHBoxLayout()
        label = QLabel(label_text)
        label.setFixedWidth(180)
        row_layout.addWidget(label)
        row_layout.addWidget(combo_box)
        self.verticalLayout.addLayout(row_layout)

    def update_model_apn(self):
        index = self.category_combo.currentIndex()
        if index < 0:
            return

        self.model_combo.clear()
        self.apn_combo.clear()

        if index < len(self.model.grouped_unique_second_col):
            self.model_combo.addItems(self.model.grouped_unique_second_col[index])

        if index < len(self.model.grouped_unique_third_col):
            self.apn_combo.addItems(self.model.grouped_unique_third_col[index])


    def on_btn_selectExcel(self):
        # Ëé∑ÂèñÊ°åÈù¢Ë∑ØÂæÑ
        desktop_path = QStandardPaths.writableLocation(QStandardPaths.DesktopLocation)
        # Áî®Êà∑ÈÄâÊã©fleet data ExcelÊñá‰ª∂ÁöÑÁõÆÂΩïË∑ØÂæÑ
        excel_path, _ = QFileDialog.getOpenFileName(self, "ÈÄâÊã©ExcelÊñá‰ª∂", desktop_path,
                                                    "Excel files (*.xlsx *.xls *.csv)")
        if excel_path:
            self.lineEdit_excel_path.setText(excel_path)
            self.excel_read(excel_path)

    # ËØªÂèñexcelÊúâÊïàÊï∞ÊçÆÔºåÂÅöÊàêËøáÊª§Ê†áÁ≠æ
    def excel_read(self, excel_path):
        # # Âä†ËΩΩÂ∑•‰ΩúÁ∞øÂíåÂ∑•‰ΩúË°®
        # workbook_excel = load_workbook(excel_path, read_only=True)
        # sheet = workbook_excel.active
        # for row in sheet.iter_rows():
        #     for cell in row:
        #         print(cell.value)

        try:
            df = pd.read_excel(excel_path)
        except Exception as e:
            print("ËØªÂèñÂ§±Ë¥•:", e)
            return

        # ‚úÖ ÊåáÂÆöÈúÄË¶Å‰øùÁïôÁöÑÂàóÂêç
        desired_columns = ['Material Categroy', 'Material Model', 'APN']

        # Á≠õÈÄâÂá∫Â≠òÂú®ÁöÑÂàóÔºàÈò≤Ê≠¢ÂàóÂêç‰∏çÂ≠òÂú®Êó∂Êä•ÈîôÔºâ
        existing_columns = [col for col in desired_columns if col in df.columns]

        # ‚úÖ ‰ΩøÁî® pandas ÂâçÂêëÂ°´ÂÖÖÔºàffillÔºâÂ§ÑÁêÜ NaN ÂÄº
        df = df[existing_columns].ffill()

        # üåü Â∞ÜÊï∞ÊçÆ‰ªé DataFrame ËΩ¨‰∏∫Âàó‰ºòÂÖàÊ†ºÂºèÔºàÊØè‰∏ÄÂàóÊòØ‰∏Ä‰∏™ÂàóË°®Ôºâ
        headers = existing_columns
        data_by_column = [df[col].astype(str).tolist() for col in existing_columns]

        # ÂàõÂª∫Âπ∂ËÆæÁΩÆÊ®°Âûã
        self.model = ExcelModel(data_by_column=data_by_column, headers=headers, parent=self)
        self.tableView_excel.setModel(self.model)

        # Ëá™Âä®Ë∞ÉÊï¥ÂàóÂÆΩ
        self.tableView_excel.resizeColumnsToContents()

        # ÊâìÂç∞Ë∞ÉËØï‰ø°ÊÅØ
        print("Á≠õÈÄâÂêéÁöÑÊï∞ÊçÆÔºö", self.model._data)

        # Êõ¥Êñ∞ËøáÊª§Âô®
        self.category_combo.clear()
        self.category_combo.addItems(self.model.grouped_unique_first_col)

        self.update_model_apn()





if __name__ == "__main__":
    app = QApplication(sys.argv)
    viewer = TagsWidget()
    viewer.show()
    sys.exit(app.exec())